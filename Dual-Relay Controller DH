/**
   *  Custom Device type for SmartenIT Dual-Relay Controller http://smartenit.com/product/zblc15/
   *
   *  Copyright 2014 John.Rucker@Solar-Current.com
   *
   *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
   *  in compliance with the License. You may obtain a copy of the License at:
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
   *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
   *  for the specific language governing permissions and limitations under the License.
   *
   */
  metadata {
  	definition (name: "Dual-Relay Controller", namespace: "JohnRucker", author: "John.Rucker@Solar-Current.com") {
          capability "Refresh"
          capability "Polling"
          capability "Sensor"
          capability "Configuration"
          capability "Switch"

          command "on2"
          command "off2"

          attribute "switch2","ENUM", ["on","off"]


      	//fingerprint profileId: "0104", inClusters: "0000", outClusters: "000D,0006"
          fingerprint inClusters: "0000 0001 0003 0004 0005 0006", endpointId: "01", deviceId: "0100", profileId: "0104"

  	}

  	// simulator metadata
  	simulator {
      }

  	// UI tile definitions
  	tiles {

  		standardTile("switch1", "device.switch", width: 2, height: 2, canChangeIcon: true) {
  			state "off", label: '${name}', action: "Switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
  			state "on", label: '${name}', action: "Switch.off", icon: "st.switches.switch.on", backgroundColor: "#79b821"
  		}

  		standardTile("switch2", "device.switch2", width: 2, height: 2, canChangeIcon: true) {
  			state "off", label: '${name}', action: "on2", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
  			state "on", label: '${name}', action: "off2", icon: "st.switches.switch.on", backgroundColor: "#79b821"
  		}

          standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat") {
  			state "default", action:"refresh.refresh", icon:"st.secondary.refresh"
  		}

  		main (["switch1", "switch2"])
  		details (["switch1", "switch2", "refresh"])
  	}
  }

  // Parse incoming device messages to generate events
  def parse(String description) {
      log.debug "Parse description $description"
      def name = null
      def value = null

      if (description?.startsWith("catchall: 0104 0006 02")) {
          log.debug "On/Off command received from EP 2"
          if (description?.endsWith(" 01 0140 00 38A8 00 00 0000 01 01 0000001000")){
          	name = "switch"
              value = "off"}
          else if (description?.endsWith(" 01 0140 00 38A8 00 00 0000 01 01 0000001001")){
          	name = "switch"
              value = "on"}                        
      }  
      else if (description?.startsWith("catchall: 0104 0006 01")) {
          log.debug "On/Off command received from EP 1"    
          if (description?.endsWith(" 01 0140 00 38A8 00 00 0000 01 01 0000001000")){
          	name = "switch2"
              value = "off"}
          else if (description?.endsWith(" 01 0140 00 38A8 00 00 0000 01 01 0000001001")){
          	name = "switch2"
              value = "on"}
      }

  	def result = createEvent(name: name, value: value)
      log.debug "Parse returned ${result?.descriptionText}"
      return result
  }

  // Commands to device

  def on() {
  	log.debug "Relay 1 on()"
  	sendEvent(name: "switch", value: "on")
  	"st cmd 0x${device.deviceNetworkId} 0x02 0x0006 0x1 {}"
  }

  def off() {
  	log.debug "Relay 1 off()"
  	sendEvent(name: "switch", value: "off")
  	"st cmd 0x${device.deviceNetworkId} 0x02 0x0006 0x0 {}"
  }

  def on2() {
  	log.debug "Relay 2 on()"
  	sendEvent(name: "switch2", value: "on")
  	"st cmd 0x${device.deviceNetworkId} 0x01 0x0006 0x1 {}"
  }

  def off2() {
  	log.debug "Relay 2 off()"
  	sendEvent(name: "switch2", value: "off")
  	"st cmd 0x${device.deviceNetworkId} 0x01 0x0006 0x0 {}"
  }

  def poll(){
  	log.debug "Poll is calling refresh"
  	refresh()
  }

  def refresh() {
  	log.debug "sending refresh command"
      def cmd = []

      cmd << "st rattr 0x${device.deviceNetworkId} 0x02 0x0006 0x0000"	// Read on / off value at End point 0x01 
      cmd << "delay 150"

      cmd << "st rattr 0x${device.deviceNetworkId} 0x01 0x0006 0x0000"	// Read on / off value at End point 0x02 

      cmd
  }



  def configure() {
  	log.debug "Binding SEP 0x01 and 0x02 DEP 0x01 Cluster 0x0006 On / Off cluster to hub" 
      def cmd = []
      cmd << "zdo bind 0x${device.deviceNetworkId} 0x02 0x01 0x0006 {${device.zigbeeId}} {}"	// Bind on/off output to SmartThings hub for end point 1
      cmd << "delay 150"
      cmd << "zdo bind 0x${device.deviceNetworkId} 0x01 0x01 0x0006 {${device.zigbeeId}} {}" 	// Bind on/off output to SmartThings hub for end point 2
      cmd
  }
